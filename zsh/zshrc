# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="" # I use the Pure theme which isn't oh-my-zsh compatible

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# zsh Completions from Homebrew
# This needs to be done before compinit is called, so that means
# before oh-my-zsh is loaded.
FPATH=${HOME}/src/dotfiles/zsh/completions:$FPATH

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

# NOTE: vi-mode and virtualenv are incompatible with the pure prompt
#       and I should never use them!
plugins=(
  aws
  brew
  colored-man-pages
  cp
  docker
  docker-compose
  fzf
  gcloud
  gitfast
  golang
  gpg-agent
  heroku
  pipenv
  pyenv
  python
  rake
  rbenv
  ripgrep
  ruby
  vagrant
)

source $ZSH/oh-my-zsh.sh

# USER CONFIG
# This function is useful
_has() {
  # Returns whether the given command is executable or aliased.
  return $( type $1 >/dev/null )
}

add_to_path() {
  local DIR=$1
  if ! grep ":$DIR:" -q <<< ":$PATH:"; then
    export PATH=$PATH:$DIR
  fi
}

# Correct a bad $SHELL setting
if [[ $SHELL == *"bash"* ]]; then
  export SHELL=/usr/local/bin/zsh
fi

# Nicer workaround for Vim+tmux colors and mappings.
# See: https://github.com/henrik/dotfiles/commit/f8347e465fe9c4b9ff7ea211e2263d6e34ace9dd
export TERM='xterm-256color'


# PROMPT CONFIG
fpath+=$HOME/src/dotfiles/zsh/pure
autoload -U promptinit
promptinit
prompt pure

# ALIASES
alias atom-update-packages="cd ~/src/dotfiles; rake atom:packages"
alias atom-update-plugins=atom-update-packages
alias atom="/Applications/Atom.app/Contents/Resources/app/atom.sh"
alias be='bundle exec'
alias ber='bundle exec ruby'
alias emacs="vim"
alias please='sudo $(fc -ln -1)'
alias gci='git commit --verbose'
alias gcis='git commit --gpg-sign --verbose'
alias gd='git diff --color=always'
alias gdl='git diff --color=always | less -r'
alias gll='git log --color=always | less -r'
alias gpoh='git push origin HEAD'
alias grep='grep --color=auto -E'
alias gss='git status --short --branch'
alias irc-server='gcloud compute ssh ian@irc-client'
alias ll='ls -lah'
alias rsync-copy="rsync -avz --progress -h"
alias rsync-move="rsync -avz --progress -h --remove-source-files"
alias rsync-synchronize="rsync -avzu --delete --progress -h"
alias rsync-update="rsync -avzu --progress -h"
alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
if _has nvim; then
  alias vim=nvim
fi
alias v="vim"
alias v='vim'
alias vi="vim"
alias vim-update-plugins='vim +PlugUpdate +qall'

# Curl Power Ups
alias hstat="curl -o /dev/null --silent --head --write-out '%{http_code}\n'" $1

# Unalias stuff that gets set in oh-my-zsh plugins that I don't like
unalias gob goc god gof gofa gog goi gol gom gop gopb gops gor got gov

# DOCKER CONFIG
alias docker_clean_images='docker rmi $(docker images -a --filter=dangling=true -q)'
alias docker_clean_ps='docker rm $(docker ps --filter=status=exited --filter=status=created -q)'

# ENVIRONMENT
# Python configuration
# export WORKON_HOME=$HOME/.virtualenvs
# export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2
command -v pyenv &> /dev/null && FOUND_PYENV=1 || FOUND_PYENV=0
if [[ $FOUND_PYENV -eq 1 ]]; then
  export PYENV_ROOT=$(pyenv root)
fi
unset FOUND_PYENV
export PIPENV_IGNORE_VIRTUALENVS=1

# Perl
if [[ -a "/usr/local/bin/perl" ]]; then
  export PERL_MB_OPT="--install_base \"/Users/ianc/.perl5\""
  export PERL_MM_OPT="INSTALL_BASE=/Users/ianc/.perl5"
  export PERL5LIB=${HOME}/.perl5/lib/perl5
fi

# Preferred editor for local and remote sessions
# (Yes, I know it's vim in both cases...)
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='vim'
fi

export GREP_COLOR='1;32'

export LSCOLOR="Gxfxcxdxbxegedabagacad"

if [[ -a "/usr/libexec/java_home" ]]; then
  export JAVA_HOME="$(/usr/libexec/java_home)"
fi

if [[ -d "${HOME}/.aws/certs" ]]; then
  export EC2_PRIVATE_KEY="$(/bin/ls "$HOME"/.aws/certs/*-pk.pem | /usr/bin/head -1)"
  export EC2_CERT="$(/bin/ls "$HOME"/.aws/certs/*-cert.pem | /usr/bin/head -1)"
fi
#export EC2_HOME="/usr/local/Cellar/ec2-api-tools/1.7.1.0/libexec"

[[ -s "$HOME/.aws/keys.zsh" ]] && source "$HOME/.aws/keys.zsh"

export COPYFILE_DISABLE=true

# Language
export LC_COLLATE=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_MESSAGES=en_US.UTF-8
export LC_MONETARY=en_US.UTF-8
export LC_NUMERIC=en_US.UTF-8
export LC_TIME=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LESSCHARSET=utf-8

# Use Homebrew OpenSSL w/Ruby
if [[ -a "/usr/local/bin/brew" ]]; then
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
fi

# FUNCTIONS
function rpg {
  rg -p "$@" | less -R
}

function listpaths {
  echo "$PATH" | tr ':' '\n'
}

# FZF CONFIG
if _has fzf; then

export FZF_DEFAULT_OPTS='
--preview "[[ $(file --mime {}) =~ binary ]] &&
             echo {} is a binary file ||
             (highlight -O ansi {} ||
             cat {}) 2> /dev/null | head -$LINES"'


# Nord colors for fzf
# Generated here: https://minsw.github.io/fzf-color-picker/
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
    --color=fg:#e5e9f0,bg:#3b4251,hl:#81a1c1
    --color=fg+:#e5e9f0,bg+:#3b4251,hl+:#81a1c1
    --color=info:#eacb8a,prompt:#bf6069,pointer:#b48dac
    --color=marker:#a3be8b,spinner:#b48dac,header:#a3be8b'

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  IFS=$'\n' out=("$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)")
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
 }

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
fkill() {
  local pid
  if [ "$UID" != "0" ]; then
      pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
      pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]
  then
      echo $pid | xargs kill -${1:-9}
  fi
}

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# List all vagrant boxes available in the system including its
# status, and try to access the selected one via ssh
vs(){
	cd $(cat ~/.vagrant.d/data/machine-index/index | jq '.machines[] | {name, vagrantfile_path, state}' | jq '.name + "," + .state  + "," + .vagrantfile_path'| sed 's/^"\(.*\)"$/\1/'| column -s, -t | sort -rk 2 | fzf | awk '{print $3}'); vagrant ssh
}

fi

# fzf + ripgrep configuration
if _has rg; then
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# GCLOUD CONFIG
# Required for gcloud SDK to work in my environment
# because I don't have python2 in the path any more.
# This was set up with:
#     pyenv install 2.7.16
#     pyenv virtualenv 2.7.16 gcloud-sdk
if _has gcloud; then
  if [ "$(uname 2> /dev/null)" != "Linux" ]; then
    # Only need this on macOS
    export CLOUDSDK_PYTHON=~/.pyenv/versions/gcloud-sdk/bin/python2
  fi
  # See: https://cloud.google.com/sdk/crypto
  # Required to work with legacy p12 keyfiles
  export CLOUDSDK_PYTHON_SITEPACKAGES=1
fi

# GO CONFIG
# Commenting this out because I think the golang oh-my-zsh plugin takes
# care of it for me now.
# Make sure go is in the path
# if (( ! $+commands[go] )); then
#   if [ -d '/usr/local/go/bin' ]; then
#     path+=('/usr/local/go/bin')
#     export PATH
#   fi
# fi

# HISTORY CONFIG
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
HISTDUP=erase               # Erase duplicates in the history file
setopt    appendhistory     # Append history to the history file (no overwriting)
setopt    sharehistory      # Share history across terminals
setopt    incappendhistory  # Immediately append to the history file, not just when a term is killed

alias h='history'

# fh - repeat history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

# HOMEBREW CONFIG
if _has brew > /dev/null; then
  # For the 5.0.x Homebrew'ed zsh installation...
  # unalias run-help
  autoload run-help
  HELPDIR=/usr/local/share/zsh/help

  # Opt out of Homebrew analytics
  export HOMEBREW_NO_ANALYTICS=1

  # Cask options
  HOMEBREW_CASK_OPTS="--appdir=~/Applications"
fi

# JQ CONFIG
# Some handy functions to make working with JSON simpler
if _has jq > /dev/null; then
  function jq-flatten() {
    jq -r '
    tostream
    | select(length > 1)
    | (
    .[0] | map(
    if type == "number"
    then "[" + tostring + "]"
    else "." + .
    end
    ) | join("")
    ) + " = " + (.[1] | @json)
    ' $*
  }
fi

# Localized configuration
if [ -f "${HOME}/.zsh_local" ]; then
  source "${HOME}/.zsh_local"
fi

# SYNTAX HIGHLIGHTING CONFIG
# This needs to be last in zshrc!
if [ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters
fi
