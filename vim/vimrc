""""""""""""""""""""""
" Vundle Setup
set nocompatible                      " be iMproved, required
filetype off                          " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

""""""""""""""""""""""""
" Vundle-Managed Plugins
Plugin 'gmarik/Vundle.vim'            " let Vundle manage Vundle, required
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-endwise'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-haml'
Plugin 'flazz/vim-colorschemes'
Plugin 'kien/ctrlp.vim'
" Plugin 'junegunn/fzf'
Plugin 'jeetsukumaran/vim-buffergator'
" Plugin 'godlygeek/tabular'
Plugin 'junegunn/vim-easy-align'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'nacitar/terminalkeys.vim'
if !has('nvim')
  Plugin 'drmikehenry/vim-fixkey'
endif
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
" Plugin 'rizzatti/dash.vim'
" Plugin 'plasticboy/vim-markdown'
Plugin 'shougo/deoplete.nvim'
Plugin 'ianchesal/myhelp.vim'

call vundle#end()

""""""""""""""""""""""
" Basic configuration
"
set nocp          " Disable vi compatibility, for vim-specific awesomeness
set expandtab     " Expand tabs to spaces
set tabstop=2
set bs=2          " Fix backspace key to work under screen
set shiftwidth=2
set number        " Enable line numbering
" set relativenumber " Enable relative line numbering for easier jump calculations
set autoindent    " When you press enter you stay at the current indent
set wildmode=longest,list " Better tab completion for :e and friends
set wildignore=*.rbc,.git,*.o,*.gem
set history=100   " Default is 20, not enough.
set ls=2          " Always display a status line
" set colorcolumn=80 " Vertical bar at 80 chars
set complete=.,w,b,u,t,i,kspell

set visualbell     " Use visual bell instead of beeping.
set shortmess=atI  " short info tokens, short command line messages, no intro.
set modelines=0    " Disable modelines; not used, risk of security exploits.
set encoding=utf-8 " Default to Unicode/UTF-8 rather than latin1
set ttyfast        " Terminals are plenty fast these days.

set winwidth=81    " Ideal minimum window width of 80 chars

set clipboard=unnamed " Allow clipboard sharing with OS X. See: http://stackoverflow.com/a/680271/259811

set gfn=Monofur:h14

noremap ; :

syntax on

filetype plugin indent on

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

""""""""""""""""
" PRETTY COLORS
"
if has("gui_running")
  set guioptions=egmrt
endif

set t_Co=256

set background=dark
" colorscheme solarized
colorscheme molokai

" call togglebg#map("<F3>")


" Bind tab to shift between buffers
nmap <tab> :bn<cr>
nmap <s-tab> :bp<cr>

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

" Strip trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

"""""""""""""""""""""""""""""
" HIGHLIGHTING AND FILE TYPES
"

" Highlight trailing whitespace etc
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+\%#\@<!$/

augroup vimrcEx
  autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

  " Auto reload this file when editing it
  au! BufWritePost .vimrc source %

  " Add rails filetype to all ruby files, need to find a way to limit to just rails files maybe
  au BufRead,BufNewFile *.rb set filetype=ruby.rails.rspec
  au BufRead,BufNewFile Isolate set filetype=ruby
  au BufRead,BufNewFile config.ru set filetype=ruby

  " Vagrantfiles are Ruby
  au BufRead,BufNewFile Vagrantfile set filetype=ruby

  " Override default modula2 detection, these files are markdown
  au BufNewFile,BufRead *.md set filetype=markdown

  " Don't leave insert mode when I tab away
  " This doesn't work: au BufEnter * :startinsert

  " C style for ruby codes
  au FileType c setl ts=4 sw=4 noexpandtab

  " Exit insert mode when Vim loses focus.
  " A bug prevents this from working: autocmd FocusLost * stopinsert
  " See http://stackoverflow.com/questions/2968548
  autocmd! FocusLost * call feedkeys("\<C-\>\<C-n>")

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

augroup END

"""""""""""""""""""""""
" Airline Configuration
"
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
" let g:airline#extensions#tabline#fnamemod = ':t'
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

""""""""""""""""""""""""""""""""""""""
" Working with Buffers Instead of Tabs
" See: https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Setup some default ignores
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
      \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
      \}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

"""""""""""""""""""""""""""
" NERDTree Configuration
" Show hidden files by default
let NERDTreeShowHidden=1

" Toggle with Ctrl-n
map <C-n> :NERDTreeToggle<CR>

" Close vim if the only thing left open is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"""""""""""""""""""""""""""
" Buffergator Configuration
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

" I want my own keymappings...
let g:buffergator_suppress_keymaps = 1

" Looper buffers
"let g:buffergator_mru_cycle_loop = 1

" Go to the previous buffer open
nmap <leader>jj :BuffergatorMruCyclePrev<cr>

" Go to the next buffer open
nmap <leader>kk :BuffergatorMruCycleNext<cr>

" View the entire list of buffers open
nmap <leader>bl :BuffergatorOpen<cr>

" Shared bindings from Solution #1 from earlier
nmap <leader>T :enew<cr>
nmap <leader>bq :bp <BAR> bd #<cr>


" Make arrow keys work in tmux sessions
if &term =~ '256color'
  set t_ut=
endif

"""""""""""""""""""""""""""
" Markdown Configuration
" Don't automatically fold everything when opening a Markdown doc
" let g:vim_markdown_folding_disabled=1

"""""""""""""""""""""""""""
" Easy Align Configuration
" From: https://github.com/junegunn/vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" deoplete configuration
" Turn it on by default
let g:deoplete#enable_at_startup = 1
" Use smartcase for completions
let g:deoplete#enable_smart_case = 1
" Use tab-complete to navigate completions
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" fzf configuration
" This is a wild noremap for me! I've been use ; for : for a long time
" so let's see if this trips me up or makes me superhuman.
" nmap ; :Buffers<CR>
" Search files like the old CTRL-P plugin used to do
" nmap <Leader>p :Files<CR>
